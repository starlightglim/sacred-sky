{"ast":null,"code":"import * as THREE from 'three';\nimport { fragmentShader } from './shaders';\nclass CloudLayer {\n  constructor(isFront = false) {\n    const isMobile = window.innerWidth <= 768;\n    this.settings = {\n      timeScale: 6.0,\n      cloudScale: isMobile ? 0.15 : 0.13,\n      softness: isMobile ? 0.24 : 0.12,\n      brightness: 1.0,\n      turbulence: 0.007,\n      noiseFrequency: isMobile ? 4.4 : 0.87,\n      waveIntensity: 0.05,\n      noiseScale: 2.0,\n      density: isFront ? 0.57 : 0.58,\n      depth: isFront ? 0.1 : -0.58\n    };\n\n    // Create the shader material\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        uTime: {\n          value: 0\n        },\n        uResolution: {\n          value: new THREE.Vector2(1, 1)\n        },\n        uFrontLayer: {\n          value: isFront\n        },\n        uCloudScale: {\n          value: this.settings.cloudScale\n        },\n        uTimeScale: {\n          value: this.settings.timeScale\n        },\n        uSoftness: {\n          value: this.settings.softness\n        },\n        uBrightness: {\n          value: this.settings.brightness\n        },\n        uDensity: {\n          value: this.settings.density\n        },\n        uTurbulence: {\n          value: this.settings.turbulence\n        },\n        uNoiseFrequency: {\n          value: this.settings.noiseFrequency\n        },\n        uWaveIntensity: {\n          value: this.settings.waveIntensity\n        },\n        uNoiseScale: {\n          value: this.settings.noiseScale\n        }\n      },\n      fragmentShader,\n      transparent: true\n    });\n\n    // Create a full-screen plane geometry\n    const geometry = new THREE.PlaneGeometry(2, 2);\n\n    // Create the mesh with the geometry and material\n    this.mesh = new THREE.Mesh(geometry, material);\n    this.mesh.position.z = this.settings.depth;\n    this.material = material;\n  }\n\n  /**\n   * Updates the time uniform for animation\n   * @param {number} time - Current time in seconds\n   */\n  update(time) {\n    this.material.uniforms.uTime.value = time;\n  }\n\n  /**\n   * Updates the resolution uniform when window is resized\n   * @param {number} width - Window width\n   * @param {number} height - Window height\n   */\n  setSize(width, height) {\n    this.material.uniforms.uResolution.value.set(width, height);\n  }\n\n  /**\n   * Clean up resources\n   */\n  dispose() {\n    this.material.dispose();\n    this.mesh.geometry.dispose();\n  }\n}\nexport default CloudLayer;","map":{"version":3,"names":["THREE","fragmentShader","CloudLayer","constructor","isFront","isMobile","window","innerWidth","settings","timeScale","cloudScale","softness","brightness","turbulence","noiseFrequency","waveIntensity","noiseScale","density","depth","material","ShaderMaterial","uniforms","uTime","value","uResolution","Vector2","uFrontLayer","uCloudScale","uTimeScale","uSoftness","uBrightness","uDensity","uTurbulence","uNoiseFrequency","uWaveIntensity","uNoiseScale","transparent","geometry","PlaneGeometry","mesh","Mesh","position","z","update","time","setSize","width","height","set","dispose"],"sources":["/Users/yassin/Desktop/code/sacred-sky/src/components/CloudBackground/CloudLayer.js"],"sourcesContent":["import * as THREE from 'three';\nimport { fragmentShader } from './shaders';\n\nclass CloudLayer {\n  constructor(isFront = false) {\n    const isMobile = window.innerWidth <= 768;\n    \n    this.settings = {\n      timeScale: 6.0,\n      cloudScale: isMobile ? 0.15 : 0.13,\n      softness: isMobile ? 0.24 : 0.12,\n      brightness: 1.0,\n      turbulence: 0.007,\n      noiseFrequency: isMobile ? 4.4 : 0.87,\n      waveIntensity: 0.05,\n      noiseScale: 2.0,\n      density: isFront ? 0.57 : 0.58,\n      depth: isFront ? 0.1 : -0.58\n    };\n\n    // Create the shader material\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        uTime: { value: 0 },\n        uResolution: { value: new THREE.Vector2(1, 1) },\n        uFrontLayer: { value: isFront },\n        uCloudScale: { value: this.settings.cloudScale },\n        uTimeScale: { value: this.settings.timeScale },\n        uSoftness: { value: this.settings.softness },\n        uBrightness: { value: this.settings.brightness },\n        uDensity: { value: this.settings.density },\n        uTurbulence: { value: this.settings.turbulence },\n        uNoiseFrequency: { value: this.settings.noiseFrequency },\n        uWaveIntensity: { value: this.settings.waveIntensity },\n        uNoiseScale: { value: this.settings.noiseScale }\n      },\n      fragmentShader,\n      transparent: true\n    });\n\n    // Create a full-screen plane geometry\n    const geometry = new THREE.PlaneGeometry(2, 2);\n    \n    // Create the mesh with the geometry and material\n    this.mesh = new THREE.Mesh(geometry, material);\n    this.mesh.position.z = this.settings.depth;\n    this.material = material;\n  }\n\n  /**\n   * Updates the time uniform for animation\n   * @param {number} time - Current time in seconds\n   */\n  update(time) {\n    this.material.uniforms.uTime.value = time;\n  }\n\n  /**\n   * Updates the resolution uniform when window is resized\n   * @param {number} width - Window width\n   * @param {number} height - Window height\n   */\n  setSize(width, height) {\n    this.material.uniforms.uResolution.value.set(width, height);\n  }\n\n  /**\n   * Clean up resources\n   */\n  dispose() {\n    this.material.dispose();\n    this.mesh.geometry.dispose();\n  }\n}\n\nexport default CloudLayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}